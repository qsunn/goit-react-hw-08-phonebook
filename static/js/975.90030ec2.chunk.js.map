{"version":3,"file":"static/js/975.90030ec2.chunk.js","mappings":"kQAMaA,EAAe,WAC1B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAkBXC,EAAgB,SAAAC,GACpB,MAAwBA,EAAEC,OAAlBV,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MACd,OAAQX,GACN,IAAK,OACHC,EAAQU,GACR,MACF,IAAK,QACHR,EAASQ,GACT,MACF,IAAK,WACHN,EAAYM,GACZ,MACF,QACE,MAAM,IAAIC,MAAJ,yBAA4BZ,IAEvC,EAuBD,OACE,kBAAMa,UAAWC,EAAAA,EAAAA,QAAgBC,SAtBb,SAAAN,GACpBA,EAAEO,iBAEF,IAAMC,EAAc,CAAEjB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,GAEnC,IAhC0B,SAAAa,GAC1B,IAAQjB,EAA0BiB,EAA1BjB,KAAME,EAAoBe,EAApBf,MAEd,OAFkCe,EAAbb,SAGVc,QAAU,GACQ,IAA3BlB,EAAKmB,MAAM,KAAKD,QAChBhB,EAAMkB,SAAS,IAElB,CAwBMC,CAAoBJ,GACvB,OAAOK,EAAAA,GAAAA,MAAY,0BAA2B,CAC5CC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,SAGXxB,GAASyB,EAAAA,EAAAA,IAASd,IAhDlBhB,EAAQ,IACRE,EAAS,IACTE,EAAY,GAiDb,EAGC,WACE,8BACE,qCACA,kBACE2B,SAAUxB,EACVG,MAAOX,EACPiC,YAAY,kBACZC,KAAK,OACLlC,KAAK,OACLmC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRxB,UAAWC,EAAAA,EAAAA,gBAIf,8BACE,sCACA,kBACEkB,SAAUxB,EACVG,MAAOT,EACP+B,YAAY,mBACZC,KAAK,QACLlC,KAAK,QACLqC,UAAQ,EACRxB,UAAWC,EAAAA,EAAAA,gBAIf,8BACE,yCACA,kBACEkB,SAAUxB,EACVG,MAAOP,EACP6B,YAAY,sBACZC,KAAK,WACLlC,KAAK,WACLqC,UAAQ,EACRxB,UAAWC,EAAAA,EAAAA,gBAIf,mBAAQoB,KAAK,SAASrB,UAAS,UAAKC,EAAAA,EAAAA,OAAL,cAA/B,wBAKL,ECxGD,EARqB,WACnB,OACE,gBAAKD,UAAS,UAAKC,EAAAA,EAAAA,QAAL,oBAAd,UACE,SAAChB,EAAD,KAGL,C","sources":["components/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { register } from 'redux/auth/operations';\nimport { styles } from 'utils/styles';\n\nexport const RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const credentialsValidate = credentials => {\n    const { name, email, password } = credentials;\n\n    return (\n      password.length >= 7 &&\n      name.split(' ').length === 2 &&\n      email.includes('.')\n    );\n  };\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        throw new Error(`Invalid field: ${name}`);\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const credentials = { name, email, password };\n\n    if (!credentialsValidate(credentials))\n      return toast.error(\"You have invalid fields\", {\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n\n    dispatch(register(credentials));\n\n    reset();\n  };\n\n  return (\n    <form className={styles.flexCol} onSubmit={submitHandler}>\n      <label>\n        <span>Name:</span>\n        <input\n          onChange={changeHandler}\n          value={name}\n          placeholder=\"Enter your name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={styles.formInput}\n        />\n      </label>\n\n      <label>\n        <span>Email:</span>\n        <input\n          onChange={changeHandler}\n          value={email}\n          placeholder=\"Enter your email\"\n          type=\"email\"\n          name=\"email\"\n          required\n          className={styles.formInput}\n        />\n      </label>\n\n      <label>\n        <span>Password:</span>\n        <input\n          onChange={changeHandler}\n          value={password}\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          name=\"password\"\n          required\n          className={styles.formInput}\n        />\n      </label>\n\n      <button type=\"submit\" className={`${styles.button} mt-6 mb-4`}>\n        Register\n      </button>\n    </form>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm';\nimport { styles } from 'utils/styles';\n\nconst RegisterPage = () => {\n  return (\n    <div className={`${styles.flexCol} mx-auto md:w-80`}>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","changeHandler","e","target","value","Error","className","styles","onSubmit","preventDefault","credentials","length","split","includes","credentialsValidate","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","register","onChange","placeholder","type","pattern","title","required"],"sourceRoot":""}